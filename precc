#!/bin/bash

# TODO: Add create_raw option to script.

# Exit on error
set -e
set -o pipefail

DEBUG=1

# Default values.
CONFIGFILE=${HOME}/commoncrawl/.config

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export SCRIPTDIR

# Locations of executables.
DOWNLOAD_BIN=${SCRIPTDIR}/download_wet.sh
MONOLINGUAL_BIN=${SCRIPTDIR}/collect_monolingual.sh
UNSAFE_DEDUPE_BIN=${SCRIPTDIR}/unsafe_dedupe.sh


main() {
    source ${SCRIPTDIR}/util.sh
    parse_args "$@"
    load_config "${CONFIGFILE}"

    if [[ $SETUP -eq 1 ]]; then
        setup
    fi

    if [[ $DOWNLOAD -eq 1 ]]; then
        download
    fi

    if [[ $EXTRACT_MONOLINGUAL -eq 1 ]]; then
        extract_monolingual
    fi

    if [[ $DEDUPE -eq 1 ]]; then
        dedupe
    fi
}


####################################################################################################
# SETUP                                                                                            #
####################################################################################################

check_setup_opts() {
    if [[ -z "${WET_DIR}" ]] || [[ -z "${MONOLINGUAL_DIR}" ]] || [[ -z "${DEDUPED_DIR}" ]] || [[ -z "${CRAWL_URL}" ]]; then
        echo "For the setup action --wet-dir, --monolingual-dir, --deduped-dir and --crawl-url must be set." >&2
        exit 1
    fi
}

setup() {
    check_setup_opts

    # Make directories for specified crawl.
    mkdir -p "${WET_DIR}"
    mkdir -p "${MONOLINGUAL_DIR}"
    mkdir -p "${DEDUPED_DIR}"
    cd "${WET_DIR}"

    # Download path file.
    wget -nc "${CRAWL_URL}"

    # Convert to HTTPS URLs.
    if [[ $DEBUG -eq 0 ]]; then
        gzip -cd wet.paths.gz | sed 's/^/https:\/\/commoncrawl.s3.amazonaws.com\//' > wet.paths.http
    else
        gzip -cd wet.paths.gz | sed 's/^/https:\/\/commoncrawl.s3.amazonaws.com\//' > paths.tmp
        head -2 "paths.tmp" > wet.paths.http
        rm "paths.tmp"
    fi

    # Make subdirectories.
    for f in $(cat wet.paths.http | cut -d '/' -f 7 | sort | uniq); do
        mkdir -p $f
    done
}

####################################################################################################
# DOWNLOAD                                                                                         #
####################################################################################################

check_download_opts() {
    if [[ -z "${WET_DIR}" ]]; then
        echo "For the download action --wet-dir must be set." >&2
        exit 1
    fi
}

download() {
    check_download_opts

    cd "${WET_DIR}"
    PARALLEL_OPTIONS="${PARALLEL_OPTIONS} --wd ${WET_DIR}"

    echo ""
    echo "Starting download.."

    cat "${WET_DIR}/wet.paths.http" | parallel ${PARALLEL_OPTIONS} ${DOWNLOAD_BIN}

    echo "Counting downloaded files.."
    while [[ $(count_downloads) ]]; do
        echo "Restarting downloads since there are missing files"
        cat "${WET_DIR}/wet.paths.http" | parallel ${PARALLEL_OPTIONS} ${DOWNLOAD_BIN}
        echo "Counting downloaded files.."
    done
    echo "All files downloaded"
}

count_downloads() {
    TOTAL=0
    DOWNLOADED=0
    for path in $(cat "${WET_DIR}/wet.paths.http"); do
        TOTAL=$((TOTAL+1))
        # TODO: Explain awk expression.
        FILENAME=$(echo $path | awk 'BEGIN { FS = "/" } { print $(NF-2) "/" $(NF)}')
        if [ -f ${FILENAME}.done ]; then
            DOWNLOADED=$((DOWNLOADED+1))
        fi
    done
    DIFFERENCE=$((TOTAL-DOWNLOADED))
    if [[ "$DIFFERENCE" -ne 0 ]]; then
        echo "There are ${DIFFERENCE} files missing/incomplete"
    fi
}

####################################################################################################
# EXTRACT_MONOLINGUAL                                                                              #
####################################################################################################

check_monolingual_opts() {
    if [[ -z "${WET_DIR}" ]] || [[ -z "${MONOLINGUAL_DIR}" ]]; then
        echo "To extract monolingual data the --wet-dir and --monolingual-dir options must be set." >&2
        exit 1
    fi
}

extract_monolingual() {
    check_monolingual_opts

    echo ""
    echo "Extracting monolingual data.."
    ls --hide=wet.* "${WET_DIR}" | \
        parallel ${PARALLEL_OPTIONS} ${MONOLINGUAL_BIN} "${WET_DIR}"/{} "${MONOLINGUAL_DIR}"/{}
}

####################################################################################################
# DEDUPE                                                                                           #
####################################################################################################

check_dedupe_opts() {
    if [[ -z "${MONOLINGUAL_DIR}" ]] || [[ -z "${DEDUPED_DIR}" ]] || [[ -z "${LANGUAGES}" ]]; then
        echo "To run the deduper the --monolingual-dir, --deduped-dir and --languagesfile options must be set." >&2
        exit 1
    fi
}

dedupe() {
    # TODO: Implement sharding capability.
    # NOTE: Maybe implement that in deduper.
    # NOTE: Pseudo code for sharder:
    # Get all monolingual out and pipe it into sharder
    # use parallel to shard different files on different machines

    check_dedupe_opts

    # Description of the location of all files. We need to escape the asterix
    # because otherwise we already do file expansion when calling dedupe.sh.
    local MONO_FILES="${MONOLINGUAL_DIR}/\*/text.{}.gz"

    echo ""
    echo "Creating deduped files.."
    cat "${LANGUAGES}" | \
        parallel ${PARALLEL_OPTIONS} ${UNSAFE_DEDUPE_BIN} ${MONO_FILES} ${DEDUPED_DIR} {}
}

####################################################################################################
# MAIN EXECUTION                                                                                   #
####################################################################################################

main "$@"
